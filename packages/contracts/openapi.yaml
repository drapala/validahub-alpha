openapi: 3.1.0
info:
  title: ValidaHub API
  description: |
    Multi-tenant CSV validation and data processing API with comprehensive observability.
    
    ## Authentication
    All endpoints require JWT Bearer authentication with appropriate scopes.
    
    ## Multi-tenancy
    All requests must include `X-Tenant-Id` header to identify the tenant context.
    
    ## Idempotency
    POST operations that create resources require `Idempotency-Key` header to ensure safe retries.
    
    ## Rate Limiting
    API is rate-limited per tenant. Rate limit headers are included in responses.
    
    ## Observability
    All requests should include `X-Request-Id` for correlation across services.
  version: 1.0.0
  contact:
    name: ValidaHub Engineering
    email: engineering@validahub.com
  license:
    name: Proprietary

servers:
  - url: https://api.validahub.com/v1
    description: Production server
  - url: https://staging-api.validahub.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development

security:
  - bearerAuth: []

paths:
  # Job Management
  /jobs:
    post:
      summary: Submit a new job for processing
      operationId: submitJob
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:write]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitJobRequest'
            examples:
              csv_validation:
                summary: CSV validation job
                value:
                  channel: "mercado_livre"
                  type: "validation"
                  file_ref: "s3://uploads/tenant123/products.csv"
                  rules_profile_id: "ml@1.2.3"
                  callback_url: "https://webhook.example.com/jobs"
      responses:
        '201':
          $ref: '#/components/responses/JobCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List jobs for tenant
      operationId: listJobs
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:read]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
        - name: status
          in: query
          description: Filter by job status
          schema:
            $ref: '#/components/schemas/JobStatus'
        - name: channel
          in: query
          description: Filter by channel
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

  /jobs/{jobId}:
    get:
      summary: Get job details
      operationId: getJob
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:read]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
        - name: jobId
          in: path
          required: true
          description: Job identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              examples:
                processing:
                  summary: Job in processing
                  value:
                    id: "6c0e7a5d-4f8b-4a3e-9d2c-1b5f8e7a9c3d"
                    tenant_id: "t_123"
                    seller_id: "seller_456"
                    channel: "mercado_livre"
                    type: "validation"
                    status: "running"
                    file_ref: "s3://uploads/tenant123/products.csv"
                    counters:
                      errors: 2
                      warnings: 3
                      total: 120
                    rules_profile_id: "ml@1.2.3"
                    created_at: "2025-08-28T23:10:00Z"
                    updated_at: "2025-08-28T23:12:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /jobs/{jobId}/retry:
    post:
      summary: Retry a failed job
      operationId: retryJob
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:write]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
        - name: jobId
          in: path
          required: true
          description: Job identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job retry initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /jobs/{jobId}/download:
    get:
      summary: Get presigned URL for job output download
      operationId: downloadJobOutput
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:read]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Presigned download URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url:
                    type: string
                    format: uri
                    description: Presigned URL valid for 15 minutes
                  expires_at:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'

  /jobs/stream:
    get:
      summary: Server-sent events stream for job updates
      operationId: streamJobs
      tags:
        - Jobs
      security:
        - bearerAuth: [jobs:read]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: SSE stream
          content:
            text/event-stream:
              schema:
                type: string
              examples:
                job_started:
                  summary: Job started event
                  value: |
                    event: job.started
                    data: {"id": "6c0e...", "status": "running", "tenant_id": "t_123"}
                    
                job_completed:
                  summary: Job completed event
                  value: |
                    event: job.succeeded
                    data: {"id": "6c0e...", "status": "succeeded", "counters": {"errors": 0, "warnings": 2, "total": 120}}

  # Health and Monitoring
  /health:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

  /ready:
    get:
      summary: Readiness check endpoint
      operationId: readinessCheck
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  dependencies:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "healthy"
                      redis:
                        type: string
                        example: "healthy"
                      storage:
                        type: string
                        example: "healthy"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TenantId:
      name: X-Tenant-Id
      in: header
      required: true
      description: Tenant identifier for multi-tenancy
      schema:
        type: string
        pattern: '^[a-z0-9_]{1,50}$'
        example: "t_123"

    RequestId:
      name: X-Request-Id
      in: header
      required: false
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"

    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      description: Idempotency key for safe retries (required for POST operations)
      schema:
        type: string
        minLength: 1
        maxLength: 255
        example: "client-req-12345"

  schemas:
    JobStatus:
      type: string
      enum:
        - queued
        - running
        - succeeded
        - failed
        - cancelled
        - expired
        - retrying
      description: |
        Job processing status:
        - `queued`: Job accepted and waiting for processing
        - `running`: Job is currently being processed
        - `succeeded`: Job completed successfully
        - `failed`: Job failed with errors
        - `cancelled`: Job was cancelled by user
        - `expired`: Job expired before processing
        - `retrying`: Job is being retried after failure

    JobType:
      type: string
      enum:
        - validation
        - correction
        - enrichment
      description: Type of processing to perform on the data

    SubmitJobRequest:
      type: object
      required:
        - channel
        - type
        - file_ref
        - rules_profile_id
      properties:
        channel:
          type: string
          description: Marketplace or channel identifier
          example: "mercado_livre"
        type:
          $ref: '#/components/schemas/JobType'
        file_ref:
          type: string
          description: Reference to input file (S3 key, URL, etc.)
          example: "s3://uploads/tenant123/products.csv"
        rules_profile_id:
          type: string
          description: Rule pack version to use for processing
          pattern: '^[a-z_]+@\d+\.\d+\.\d+$'
          example: "ml@1.2.3"
        callback_url:
          type: string
          format: uri
          description: Optional webhook URL for job completion notifications
          example: "https://webhook.example.com/jobs"
        metadata:
          type: object
          description: Additional metadata for the job
          additionalProperties: true

    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique job identifier
        tenant_id:
          type: string
          description: Tenant identifier
        seller_id:
          type: string
          description: Seller identifier within tenant
        channel:
          type: string
          description: Marketplace or channel identifier
        type:
          $ref: '#/components/schemas/JobType'
        status:
          $ref: '#/components/schemas/JobStatus'
        file_ref:
          type: string
          description: Reference to input file
        output_ref:
          type: string
          description: Reference to output file (when completed)
          nullable: true
        counters:
          type: object
          properties:
            errors:
              type: integer
              minimum: 0
              description: Number of validation errors found
            warnings:
              type: integer
              minimum: 0
              description: Number of warnings found
            total:
              type: integer
              minimum: 0
              description: Total number of records processed
        idempotency_key:
          type: string
          description: Idempotency key used for this job
          nullable: true
        rules_profile_id:
          type: string
          description: Rule pack version used for processing
        callback_url:
          type: string
          format: uri
          description: Webhook URL for notifications
          nullable: true
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Job creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        completed_at:
          type: string
          format: date-time
          description: Job completion timestamp
          nullable: true

    PaginationMeta:
      type: object
      properties:
        limit:
          type: integer
          description: Number of items requested
        offset:
          type: integer
          description: Number of items skipped
        total:
          type: integer
          description: Total number of items available

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code for programmatic handling
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        request_id:
          type: string
          format: uuid
          description: Request ID for tracing
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

  responses:
    JobCreated:
      description: Job successfully created
      headers:
        X-RateLimit-Remaining:
          description: Number of requests remaining in rate limit window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Unix timestamp when rate limit resets
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'

    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validation_error:
              summary: Validation error
              value:
                code: "validation_error"
                message: "Invalid input parameters"
                details:
                  field_errors:
                    channel: ["Channel is required"]
                    file_ref: ["Must be a valid S3 reference"]
                request_id: "550e8400-e29b-41d4-a716-446655440000"
                timestamp: "2025-08-28T23:10:00Z"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict - resource already exists (idempotency key collision)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Remaining:
          description: Number of requests remaining (0)
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Unix timestamp when rate limit resets
          schema:
            type: integer
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Jobs
    description: Job submission and management
  - name: Monitoring
    description: Health and readiness endpoints